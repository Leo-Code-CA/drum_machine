import { farmAnimals, flyingAnimals, wildAnimals } from './data.js';

$(document).ready(function() {

    
    ///////////////////////////////////////////////////////////////////////////////////
    // Welcome page content

    let pickTheme;
    let finalChoice;
    
    let animals;

    $('button.theme').on('click', handleChoice);
    $('#confirm').on('click', handleConfirm);
    

    function handleChoice() {

        pickTheme = $(this).attr('id');

        if (pickTheme === 'farm') {
            $('.welcome').css('background-color', 'brown')
        } else if (pickTheme === 'wild') {
            $('.welcome').css('background-color', 'green')
        } else if (pickTheme === 'wing') {
            $('.welcome').css('backgroundColor', 'gray')
        }
    }

    function handleConfirm() {
        finalChoice = pickTheme;

        if (finalChoice === 'farm') {
            animals = farmAnimals;
        } else if (finalChoice === 'wild') {
            animals = wildAnimals;
        } else if (finalChoice = 'wing') {
            animals = flyingAnimals;
        }
        
        $('.welcome').addClass('d-none');
        $('#drum-machine').removeClass('d-none');
    }  

    ////////////////////////////////////////////////////////////////////////////////////////////////

    let sounds = [];

    // assign the sounds to the drum pads 
    for (let i = 0; i < wildAnimals.length; i++) {
        $(`audio:eq(${i})`).attr('src', wildAnimals[i].audio);
    }

    // make the click on the drum pads trigger the audio AND update the sound list 
    $("button[class|='drum']").click(function() {
        $(this).children()[0].play();
        $('#display').html(wildAnimals[this.id].animal);
    });

    // make the corresponding key press trigger the audio AND update the sound list
    $(document).on('keydown', function(event) {

        let currentKey = event.key;

        $.map(wildAnimals, function(animal, i) {
             if (animal.key === currentKey.toLowerCase()) {
                $(`button[class|='drum']:eq(${i})`).children()[0].play();
                $('#display').html(animal.animal);
             }
        })
    })

    // handle delete click - clear the list of sounds 
    $("#del").click(function() {
        $('#list').children().remove();
        $("button[class|='drum']").off( "click", handleClick);
        sounds = [];
    })




    /////////////////////////////////////////

    // when record is "ON", remember the sounds played by clicking and list them
    function handleClick() {
        sounds.push(this.id);
        $('#list').append(`<li>${wildAnimals[this.id].animal}</li>`);
    }

    
    // when record is "ON", remember the sounds played by pressing a key and list them 
    function handleKeyDown(event) {

        let currentKey = event.key;

        $.map(wildAnimals, function(animal) {
            if(animal.key === currentKey.toLowerCase()) {
                sounds.push(animal.id);
                $('#list').append(`<li>${animal.animal}</li>`)
            }
        })
    }

    // turn record "ON" - the sounds list starts to be updated
    $('#rec').click(function() {
        $("button[class|='drum']").on( "click", handleClick);
        $(document).on('keydown', handleKeyDown);
    })

    // turn record "OFF" - the sounds list is no more updated
    $('#stop').click(function() {
        $("button[class|='drum']").off( "click", handleClick);
        $(document).off('keydown', handleKeyDown)
    })

    
    ////////////////////////////////////////
    let paused = 0;
    let remainingSounds = [];

    // replay the sounds saved in the list starting from the last one which was played when the paused button has been clicked
    async function handleResume() {

        // let id = $('.playing').parent().attr('id');
        // let index = sounds.indexOf(id);
        

        let currentlyPlay = $('.playing')[0];
        currentlyPlay.play();


        if (remainingSounds.length === 0) {
            remainingSounds = sounds.slice(paused);
        } else {
            remainingSounds = remainingSounds.slice(paused);
        }

        // console.log('index is ' + index);
        // let remainingSounds = sounds.slice(paused);
        
        console.log('remaining sounds is: ' + remainingSounds);


            for (let i = 0; i < remainingSounds.length; i++) {

                $(`button[class|='drum']:eq(${remainingSounds[i]})`).children()[0].play();
                paused = i;
                console.log(`paused is: ${paused}`)
                await addDelay(3000);
        
            }
        }
        
    $('#resume').on('click', handleResume);


    // delay between two replayed sounds to avoid them to play all at the same time
    function addDelay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    

    // replay the sounds saved in the list
    async function playSounds() {

        console.log(`sounds is: ${sounds}`);

        $(`button[class|='drum']`).children().removeClass('paused');


            for (let i = 0; i < sounds.length; i++) {


            while($(`button[class|='drum']:eq(${sounds[i]})`).children().hasClass('paused') === false) {

                $(`button[class|='drum']:eq(${sounds[i]})`).children()[0].play();
                console.log(`playing: ${$(`button[class|='drum']:eq(${sounds[i]})`).children().attr('id')}`)
                paused = i;
                remainingSounds = [];
                console.log(`paused is: ${paused}`);
                // console.log($('#Q')[0].duration);
                let currentSoundDuration = Math.ceil($(`button[class|='drum']:eq(${sounds[i]})`).children()[0].duration * 1000) + 100;
                console.log(currentSoundDuration)
                await addDelay(currentSoundDuration);
                i++;
            
            }
        }


    }

    $('#play').on('click', playSounds);

    


    $('#pause').on('click', function() {

        // let id = $('.playing').parent().attr('id');
        // // let index = sounds.indexOf(id);
        // let index = sounds.indexOf(id);
        // console.log(`index of paused sound in sound array is: ${index} and sounds is: ${sounds}`)
        

        $('.playing')[0].pause();

        let soundsarr = [];

        if (remainingSounds.length === 0) {
            soundsarr = sounds;
        } else {
            soundsarr = remainingSounds;
        }
   

         for (let i = 0; i < soundsarr.length; i++) {
             $(`button[class|='drum']:eq(${sounds[i]})`).children().addClass('paused');
         }

    })



    


    $('audio').on('playing', function() {
        $(this).removeClass('ended');
        $(this).addClass('playing');
    })


    $('audio').on('ended', function() {
        $(this).addClass('ended');
        $(this).removeClass('playing');
    })



    
})